import streamlit as stimport numpy as npimport pandas as pdimport seaborn as snsimport matplotlib.pyplot as pltimport plotly.express as pximport plotly.graph_objects as godataCircuit = pd.read_csv("f1db_csv/circuits.csv")dataCircuit.rename(columns = {'name':'circuitName'}, inplace = True)dataResults = pd.read_csv("f1db_csv/results.csv")dataRaces = pd.read_csv("f1db_csv/races.csv")dataDrivers = pd.read_csv("f1db_csv/drivers.csv")dataLapTimes = pd.read_csv("f1db_csv/lap_times.csv")dataQuali = pd.read_csv("f1db_csv/qualifying.csv")dataConstructorResults = pd.read_csv("f1db_csv/constructor_results.csv")dataDriverStandings = pd.read_csv("f1db_csv/driver_standings.csv")dataConstructorStandings = pd.read_csv("f1db_csv/constructor_standings.csv")dataPitStops = pd.read_csv("f1db_csv/pit_stops.csv")dataConstructors = pd.read_csv("f1db_csv/constructors.csv")dataDriverResults = pd.merge(dataDrivers, dataResults, on="driverId")dataDriverResultsRaces = pd.merge(dataDriverResults, dataRaces, on="raceId")dataDriverResultsRaces = dataDriverResultsRaces[dataDriverResultsRaces.year > 2009]dataDriverResultsRaces["driver"] = dataDriverResultsRaces["forename"] + " " + dataDriverResultsRaces["surname"]dataAveragePoints = dataDriverResultsRaces[['driver', 'points']].groupby("driver").mean().reset_index()dataCountPoints = dataDriverResultsRaces[['driver', 'raceId']].groupby("driver").count().reset_index()dataCountPoints = dataCountPoints[dataCountPoints.raceId > 100]datafinalAverage = pd.merge(dataAveragePoints, dataCountPoints, on="driver")avgfig = px.scatter(datafinalAverage, x = "raceId", y = "points", size="points", hover_name="driver", hover_data={'raceId':False, 'points':True})st.plotly_chart(avgfig)st.dataframe(datafinalAverage)dataTotalPoints = dataDriverResultsRaces.groupby("driver").sum()st.write('Pole to Podium Conversion Rates')dfpole = (dataResults[dataResults.grid == 1 ]).sort_values(by=['driverId'])#dataframe of drivers starting at pole, replaced all finish positions below 3 by 0, and all podium finishes by 1dfpole['position'] = dfpole['position'].replace(['4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','\\N'],'0')dfpole['position'] = dfpole['position'].replace(['3','2'],'1')dfpole.position = pd.to_numeric(dfpole.position, errors='coerce').fillna(0).astype(np.int64)#finds total no of poles, podiums from pole, division gives conversion rate, I've calculated for drivers with >3 polesdfpole = dfpole[['driverId','grid','position']]dfgrids = dfpole.groupby(["driverId"]).grid.sum().reset_index()dfwins = dfpole.groupby(["driverId"]).position.sum().reset_index()dfconcatenated=pd.merge(dfgrids, dfwins, on="driverId")dfconcatenated = dfconcatenated[dfconcatenated.grid>3]dfconcatenated.rename(columns = {'grid':'Total number of pole positions', 'position':'Total number of podium finishes from pole'}, inplace = True)dfdrivers = dataDrivers[['driverId','forename','surname']]dfconversion=pd.merge(dfdrivers, dfconcatenated, on="driverId")dfconversion["driver"] = dfconversion["forename"] + " " + dfconversion["surname"]def conversioncalc(row):    return ((row['Total number of podium finishes from pole']/row['Total number of pole positions'])*100)dfconversion["Pole to Podium conversion rate (%)"] = dfconversion.apply ((lambda row: conversioncalc(row)), axis=1)dfconversion = dfconversion.sort_values(by=['Pole to Podium conversion rate (%)'], ascending=False)del dfconversion["forename"]del dfconversion["surname"]dfconversionconversionfig = px.scatter(dfconversion, x = "Total number of pole positions", y = "Total number of podium finishes from pole", size="Pole to Podium conversion rate (%)", hover_name="driver",hover_data={'driverId':False, 'Total number of podium finishes from pole':False, "Total number of pole positions": False ,"Pole to Podium conversion rate (%)":True   })st.plotly_chart(conversionfig)#multiselect for teamsteamoptions = st.multiselect('Choose teams to compare points by year', dataConstructors.name.tolist(),  default='Mercedes')#creating dataframe that groups points by year and teamdfConstructors = pd.merge(dataConstructorResults,dataConstructors, on="constructorId")dfConstructors = pd.merge(dfConstructors, dataRaces, on="raceId")dfConstructors['year'] = pd.DatetimeIndex(dfConstructors['date']).yeardfConstructors= dfConstructors[['raceId', 'year', 'constructorId', 'name_x',  'points']]pointsBySeason = dfConstructors.groupby(['year','constructorId']).agg({'points': 'sum'}).reset_index()pointsBySeason = pd.merge(pointsBySeason, dataConstructors, on="constructorId")pointsBySeason= pointsBySeason[['year', 'constructorId', 'name',  'points']]#returns dataframe with selected teams, line chart for points by seasonpoints = pointsBySeason[pointsBySeason['name'].isin(teamoptions)]fig = px.line(points, x="year", y="points", color='name')st.plotly_chart(fig)#work for teams that do well in various circuitscircuitoption = st.selectbox('Choose circuits to see teams performance in those circuits', dataCircuit.circuitName.tolist())dataRaceResults = pd.merge(dataRaces, dataResults, on="raceId")dataRaceResults = dataRaceResults[['raceId', 'circuitId', 'name', 'points', 'constructorId']]dataRaceResults = dataRaceResults.groupby(['circuitId', 'constructorId']).agg({'points': 'mean'}).reset_index()dataCircuits = pd.merge(dataRaceResults, dataConstructors, on="constructorId")dataCircuits = dataCircuits[['circuitId', 'constructorId', 'name', 'points']]dataCircuits = pd.merge(dataCircuits, dataCircuit, on="circuitId") dataCircuits = dataCircuits[['circuitId', 'constructorId', 'name', 'points', 'circuitName']]dataFinalCircuit=dataCircuits[dataCircuits['circuitName']==circuitoption][['constructorId','name','points']]circuitFig=px.pie(dataFinalCircuit, names=dataFinalCircuit['name'], values=dataFinalCircuit['points'], title='Average Points teams have earned in various circuits')st.plotly_chart(circuitFig)st.dataframe(dataCircuits)